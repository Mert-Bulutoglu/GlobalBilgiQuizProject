// <auto-generated />
using GlobalBilgiQuiz.Database.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalBilgiQuiz.Database.Migrations
{
    [DbContext(typeof(GlobalBilgiQuizDbContext))]
    [Migration("20231009131835_Mig2")]
    partial class Mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderSequence")
                .StartsAt(4L);

            modelBuilder.Entity("GlobalBilgiQuiz.Data.POCO.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChosenCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 1,
                            Text = "1881"
                        },
                        new
                        {
                            Id = 2,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 1,
                            Text = "1991"
                        },
                        new
                        {
                            Id = 3,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 1,
                            Text = "1923"
                        },
                        new
                        {
                            Id = 4,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 1,
                            Text = "1900"
                        },
                        new
                        {
                            Id = 5,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 2,
                            Text = "Seda Sayan"
                        },
                        new
                        {
                            Id = 6,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 2,
                            Text = "İbrahim Tatlıses"
                        },
                        new
                        {
                            Id = 7,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 2,
                            Text = "Winston Churcill"
                        },
                        new
                        {
                            Id = 8,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 2,
                            Text = "Türkcan Keskin"
                        },
                        new
                        {
                            Id = 9,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 3,
                            Text = "Beşiktaş"
                        },
                        new
                        {
                            Id = 10,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 3,
                            Text = "Fenerbahçe"
                        },
                        new
                        {
                            Id = 11,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 3,
                            Text = "Trabzonspor"
                        },
                        new
                        {
                            Id = 12,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 3,
                            Text = "Galatasaray"
                        });
                });

            modelBuilder.Entity("GlobalBilgiQuiz.Data.POCO.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FalseCount")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TrueCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("Metrics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FalseCount = 0,
                            QuestionId = 1,
                            TrueCount = 0
                        },
                        new
                        {
                            Id = 2,
                            FalseCount = 0,
                            QuestionId = 2,
                            TrueCount = 0
                        },
                        new
                        {
                            Id = 3,
                            FalseCount = 0,
                            QuestionId = 3,
                            TrueCount = 0
                        });
                });

            modelBuilder.Entity("GlobalBilgiQuiz.Data.POCO.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR OrderSequence");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 1,
                            Text = "Mustafa Kemal Atatürk kaç yılınca doğmuştur?"
                        },
                        new
                        {
                            Id = 2,
                            Order = 2,
                            Text = "Hangisi 2. Dünya Savaşı döneminde yaşamıştır?"
                        },
                        new
                        {
                            Id = 3,
                            Order = 3,
                            Text = "Futbolda geçen senenin şampiyonu kim oldu?"
                        });
                });

            modelBuilder.Entity("GlobalBilgiQuiz.Data.POCO.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GlobalBilgiQuiz.Data.POCO.Answer", b =>
                {
                    b.HasOne("GlobalBilgiQuiz.Data.POCO.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GlobalBilgiQuiz.Data.POCO.Metric", b =>
                {
                    b.HasOne("GlobalBilgiQuiz.Data.POCO.Question", "Question")
                        .WithOne("Metric")
                        .HasForeignKey("GlobalBilgiQuiz.Data.POCO.Metric", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GlobalBilgiQuiz.Data.POCO.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Metric")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
